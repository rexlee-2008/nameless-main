'''
import socket
import re

# 서버 IP와 포트 설정
SERVER_IP = "3.38.57.41"
PORT = 10504

# 소켓 연결 설정
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((SERVER_IP, PORT))
    received_messages = []  # 받은 메시지를 저장할 리스트

    # 문제 풀이 반복
    while True:
        # 서버로부터 데이터 수신
        data = s.recv(1024).decode()
        if not data:
            break  # 데이터가 없으면 연결 종료

        received_messages.append(data)  # 받은 메시지를 저장
        print("Received:", data)  # 서버에서 받은 문제 출력

        # 정규식으로 숫자와 연산자 추출
        match = re.search(r"\[Stage \d+\] (\d+) ([\+\-\*/]) (\d+)", data)
        if match:
            num1 = int(match.group(1))
            operator = match.group(2)
            num2 = int(match.group(3))

            # 연산자에 따라 계산
            if operator == '+':
                answer = num1 + num2
            elif operator == '-':
                answer = num1 - num2
            elif operator == '*':
                answer = num1 * num2
            elif operator == '/':
                answer = num1 // num2  # 정수 나눗셈

            # 서버에 답 전송
            s.sendall(f"{answer}\n".encode())
            print("Sent:", answer)  # 전송한 답 출력
        else:
            print("No valid question format found.")
            break

    # 추가로 빈 줄을 반복해서 서버에 전송
    for _ in range(5):
        s.sendall("\n".encode())
        data = s.recv(1024).decode()
        if data:
            received_messages.append(data)
            print("Received:", data)

    # 모든 받은 메시지 출력
    print("\nAll received messages:")
    for message in received_messages:
        print(message)
'''
'''
# 인코딩된 플래그 값
encoded_flag = "127 17 31 202 156 234 214 107 254 86 53 46 207 118 29 44 238 19 219 81 2 14 114 28 136 135 114 193 213 20 194 184 2 141 105 79 131 140 114 215 21 145"
seed = 35981  # 제공된 시드

# Fibonacci PRNG 정의
class FibonacciPRNG:
    def __init__(self, seed):
        self.state = [seed % 256, (seed >> 8) % 256]
        self.index = 0

    def next(self):
        next_val = (self.state[self.index % 2] + self.state[(self.index + 1) % 2]) % 256
        self.state[self.index % 2] = next_val
        self.index += 1
        return next_val

# PRNG 초기화
prng = FibonacciPRNG(seed)

# 인코딩된 플래그를 원래 문자로 변환
decoded_flag = []
for encoded_value in map(int, encoded_flag.split()):
    random_shift = prng.next()
    ascii_value = (encoded_value - random_shift + 256) % 256
    decoded_flag.append(chr(ascii_value))

# 플래그 출력
print("Decoded flag:", ''.join(decoded_flag))
'''
'''
from Crypto.Util.number import inverse, bytes_to_long, long_to_bytes
from sympy import factorint

# 주어진 값들
e = 65537
c1 = 381069285100501871522087811493550905198188960030751325118473292211721172724945400851753896037004606245416539933976144394979158631237671756909066247247948657455463544370978705281106076582936920059839389639324602559885258011506319919444034559534161629591362838114040811027316110122399760193317706368614091049552410153189126777046775531348995841633603915743870982717512900837715408697220152656945042833613130640604201878636782124578056677959713510522729201148873058100021433527643925404508372293838761493245193523300633811142677155050909169204237034111744335148069413991638567324485404779032807774024268683800248849305245158551014474667378084785353996087326905760046021519173564654262068228543060770224035401472305016440034107419937276452606743360092602145817996522605693522170574104072149289934130651578954382892812930560547375012607952007386098221328133681604521057092328956919768459413704775366733492106940290228897291407667073215842645582680094802781728265146676458960343970806963121253297554819744302905292070292300725362914290724183949474138147950909314365183897991947821426922965681115837438882479870511141154709033470889637694265305456662747715495015790021616624574060669895147696535390744429693577809258663966840165386993435407
c2 = 189067567513924361366841896403262862290852818934133552091223969376176842756133065184300343876378351342482398809757435596016656900573073161917379304331850007350704157392160586916533123270174140945354274212194179979653836191893130697458038530838405888127138844324772849097679116321750629080533886807420776765783941746172847831709553753006201417688728652298440697987317301855151730703703573635905882849810271134252070214368840079159389831043324643656295121177074278151076444507043284743210746646988738929938156504512240984412509205938974747552402407497421567966974824575765305251022421356985862385030348535458938858844901708520023408264985492901173877077175801005221163408655778666007241201808107485677030169130305243857752266595943639103168587096284649025674954539315353048669782392048875595639610664020410369075734789773608666125542063040732626453700969601790271924006790956175327921865531481168229889323603339035825361151830912759620097238533560817386375684965176594881676677306605042527530502146671644450958838782505080700430779435150081216067636225765101597810641167753096126000722960971877550528539845565787851101340275515309771722486035069873896866643709391742761133938205666074545421157439002945584201532020248894119434541703269

# n1, n2 소인수분해
n1 = 530714464609988271379319666168008787570512864834415117957831465100894605318124415501152436678455072997404896888952461857283907130382344972917483604782406322361362494119398114704910176714930872093510046884543231515887961468672614894089236238348146616740533769065755076838643609516986324166643827178750736404807856963177405819352341352036936604828586717197929121531682756050059264687530489601884380974589526409164528089971635388393186916816186037787781524716176288571931247769567954048144390415393154537987056253872782697992299600441589884470194747066442004537645877058890561216339379017397797132954484275658619508228887835060871526022843347877768829262073664499975108132768292714210915875453719942783772553633840011480625898945500272712886937811770715872865651625869691887391979055738960019189681747889257697505026462231992098290092786042362775735685733967646282597057077545915495889795125760993452054616355137136806134742285786513684594857372256770980482018266131245784137581659829455838715831415054857938751849616866275383294395512688095792069358806145187318552565766409549458634070177847764811182702710777163795221072332872661482354024201460632166855240700997920073679684861989423792661461371484993996596086616492901359185811689107

n2 = 666670054722277908885779357682581545047503559537049529344488649293171490098713841188823854772222757560987764289728630712712390997038482008057949285026364518079309223432457700721586019275093586229251981679376714543686195613617491115416239279477025160076502357451877687152025478772831123209087745471632615111024756262433719625922203295638888213055400752880673356273900937114023902284692522314697285457479897276978686395260475542701609219786139098396005070196230704919844781538790296041711080813501629924019292284696609256412963104525162135249999404609648345450194063250567461478165256991591172626759296399776267667958823430071680032490534256841476544429335435362445528929116891596228670394235873923106751022837976611593958546371515114753986049605844790338413799323922232867102999109835353570930691069408510912871328760058498967246927012227969746994578084829379172421450732922583459453739777322973062598135348799661667638013361076044091381103407017627914421781316129933650549694602329609003255356798176369656031354825041117506507557973582788852384198477277321845648698985979513347711568303152201384411425996090433858284727471201152327454064289589254685549383248009870418341370545081532634697964968103651905293674186034137704896376547413

# 소인수 분해
factors1 = factorint(n1)
factors2 = factorint(n2)

p1, q1 = factors1.keys()
p2, q2 = factors2.keys()

# φ(n) 계산
phi1 = (p1 - 1) * (q1 - 1)
phi2 = (p2 - 1) * (q2 - 1)

# d 계산
d1 = inverse(e, phi1)
d2 = inverse(e, phi2)

# 복호화
fl = pow(c1, d1, n1)
ag = pow(c2, d2, n2)

# bytes로 변환
flag1 = long_to_bytes(fl)
flag2 = long_to_bytes(ag)

# 결과 출력
print("Flag 1:", flag1)
print("Flag 2:", flag2)
'''
'''
from Crypto.Util.number import inverse, long_to_bytes
import gmpy2
from math import gcd

# 주어진 값들
e = 65537
c1 = 381069285100501871522087811493550905198188960030751325118473292211721172724945400851753896037004606245416539933976144394979158631237671756909066247247948657455463544370978705281106076582936920059839389639324602559885258011506319919444034559534161629591362838114040811027316110122399760193317706368614091049552410153189126777046775531348995841633603915743870982717512900837715408697220152656945042833613130640604201878636782124578056677959713510522729201148873058100021433527643925404508372293838761493245193523300633811142677155050909169204237034111744335148069413991638567324485404779032807774024268683800248849305245158551014474667378084785353996087326905760046021519173564654262068228543060770224035401472305016440034107419937276452606743360092602145817996522605693522170574104072149289934130651578954382892812930560547375012607952007386098221328133681604521057092328956919768459413704775366733492106940290228897291407667073215842645582680094802781728265146676458960343970806963121253297554819744302905292070292300725362914290724183949474138147950909314365183897991947821426922965681115837438882479870511141154709033470889637694265305456662747715495015790021616624574060669895147696535390744429693577809258663966840165386993435407
c2 = 189067567513924361366841896403262862290852818934133552091223969376176842756133065184300343876378351342482398809757435596016656900573073161917379304331850007350704157392160586916533123270174140945354274212194179979653836191893130697458038530838405888127138844324772849097679116321750629080533886807420776765783941746172847831709553753006201417688728652298440697987317301855151730703703573635905882849810271134252070214368840079159389831043324643656295121177074278151076444507043284743210746646988738929938156504512240984412509205938974747552402407497421567966974824575765305251022421356985862385030348535458938858844901708520023408264985492901173877077175801005221163408655778666007241201808107485677030169130305243857752266595943639103168587096284649025674954539315353048669782392048875595639610664020410369075734789773608666125542063040732626453700969601790271924006790956175327921865531481168229889323603339035825361151830912759620097238533560817386375684965176594881676677306605042527530502146671644450958838782505080700430779435150081216067636225765101597810641167753096126000722960971877550528539845565787851101340275515309771722486035069873896866643709391742761133938205666074545421157439002945584201532020248894119434541703269

# n1, n2 주어진 값
n1 = 530714464609988271379319666168008787570512864834415117957831465100894605318124415501152436678455072997404896888952461857283907130382344972917483604782406322361362494119398114704910176714930872093510046884543231515887961468672614894089236238348146616740533769065755076838643609516986324166643827178750736404807856963177405819352341352036936604828586717197929121531682756050059264687530489601884380974589526409164528089971635388393186916816186037787781524716176288571931247769567954048144390415393154537987056253872782697992299600441589884470194747066442004537645877058890561216339379017397797132954484275658619508228887835060871526022843347877768829262073664499975108132768292714210915875453719942783772553633840011480625898945500272712886937811770715872865651625869691887391979055738960019189681747889257697505026462231992098290092786042362775735685733967646282597057077545915495889795125760993452054616355137136806134742285786513684594857372256770980482018266131245784137581659829455838715831415054857938751849616866275383294395512688095792069358806145187318552565766409549458634070177847764811182702710777163795221072332872661482354024201460632166855240700997920073679684861989423792661461371484993996596086616492901359185811689107

n2 = 666670054722277908885779357682581545047503559537049529344488649293171490098713841188823854772222757560987764289728630712712390997038482008057949285026364518079309223432457700721586019275093586229251981679376714543686195613617491115416239279477025160076502357451877687152025478772831123209087745471632615111024756262433719625922203295638888213055400752880673356273900937114023902284692522314697285457479897276978686395260475542701609219786139098396005070196230704919844781538790296041711080813501629924019292284696609256412963104525162135249999404609648345450194063250567461478165256991591172626759296399776267667958823430071680032490534256841476544429335435362445528929116891596228670394235873923106751022837976611593958546371515114753986049605844790338413799323922232867102999109835353570930691069408510912871328760058498967246927012227969746994578084829379172421450732922583459453739777322973062598135348799661667638013361076044091381103407017627914421781316129933650549694602329609003255356798176369656031354825041117506507557973582788852384198477277321845648698985979513347711568303152201384411425996090433858284727471201152327454064289589254685549383248009870418341370545081532634697964968103651905293674186034137704896376547413

# GCD 계산
gcd_value = gcd(n1, n2)
print(f"GCD(n1, n2): {gcd_value}")

# p와 q 계산
p = gcd_value
q1 = n1 // p
q2 = n2 // p

# 복호화 함수
def decrypt(n, c, p):
    q = n // p
    phi = (p - 1) * (q - 1)
    d = inverse(e, phi)
    m = pow(c, d, n)
    return long_to_bytes(m)

# 복호화
message1 = decrypt(n1, c1, p)
message2 = decrypt(n2, c2, p)

print(f"Decrypted message 1: {message1.decode()}")
print(f"Decrypted message 2: {message2.decode()}")
'''
'''
from sympy import factorint

# 주어진 GCD 값
gcd_value = 23963768868687985743842139156873676568823618056479445921952432678289045655379650026759498303332062240097844561921526046201822956663731306578627144316942301697788595301961365615542117557379007121039924319874225950587510890311419044921624194868439780771003965038593527218347928595837144549712387437955137898342389536252172408801519559361533323573530056999095880997005249404376194642888665840838489802127908185492835237642509318164825585008158102732506279538956613254223501851452029489332623731423795806233197444593626681657817160378028227066034816958199223603946277725266407971946415307292763403837832004101947085366681

# GCD 소인수분해
factors = factorint(gcd_value)
print("GCD factors:", factors)
'''
'''
# GCD 값
p = 23963768868687985743842139156873676568823618056479445921952432678289045655379650026759498303332062240097844561921526046201822956663731306578627144316942301697788595301961365615542117557379007121039924319874225950587510890311419044921624194868439780771003965038593527218347928595837144549712387437955137898342389536252172408801519559361533323573530056999095880997005249404376194642888665840838489802127908185492835237642509318164825585008158102732506279538956613254223501851452029489332623731423795806233197444593626681657817160378028227066034816958199223603946277725266407971946415307292763403837832004101947085366681

# n1과 n2 값
n1 = 530714464609988271379319666168008787570512864834415117957831465100894605318124415501152436678455072997404896888952461857283907130382344972917483604782406322361362494119398114704910176714930872093510046884543231515887961468672614894089236238348146616740533769065755076838643609516986324166643827178750736404807856963177405819352341352036936604828586717197929121531682756050059264687530489601884380974589526409164528089971635388393186916816186037787781524716176288571931247769567954048144390415393154537987056253872782697992299600441589884470194747066442004537645877058890561216339379017397797132954484275658619508228887835060871526022843347877768829262073664499975108132768292714210915875453719942783772553633840011480625898945500272712886937811770715872865651625869691887391979055738960019189681747889257697505026462231992098290092786042362775735685733967646282597057077545915495889795125760993452054616355137136806134742285786513684594857372256770980482018266131245784137581659829455838715831415054857938751849616866275383294395512688095792069358806145187318552565766409549458634070177847764811182702710777163795221072332872661482354024201460632166855240700997920073679684861989423792661461371484993996596086616492901359185811689107
n2 = 666670054722277908885779357682581545047503559537049529344488649293171490098713841188823854772222757560987764289728630712712390997038482008057949285026364518079309223432457700721586019275093586229251981679376714543686195613617491115416239279477025160076502357451877687152025478772831123209087745471632615111024756262433719625922203295638888213055400752880673356273900937114023902284692522314697285457479897276978686395260475542701609219786139098396005070196230704919844781538790296041711080813501629924019292284696609256412963104525162135249999404609648345450194063250567461478165256991591172626759296399776267667958823430071680032490534256841476544429335435362445528929116891596228670394235873923106751022837976611593958546371515114753986049605844790338413799323922232867102999109835353570930691069408510912871328760058498967246927012227969746994578084829379172421450732922583459453739777322973062598135348799661667638013361076044091381103407017627914421781316129933650549694602329609003255356798176369656031354825041117506507557973582788852384198477277321845648698985979513347711568303152201384411425996090433858284727471201152327454064289589254685549383248009870418341370545081532634697964968103651905293674186034137704896376547413

# q와 r을 찾기
q = n1 // p
r = n2 // p

print(f"n1의 소수 q: {q}")
print(f"n2의 소수 r: {r}")
'''
from sympy import mod_inverse

# 주어진 값
p = 23963768868687985743842139156873676568823618056479445921952432678289045655379650026759498303332062240097844561921526046201822956663731306578627144316942301697788595301961365615542117557379007121039924319874225950587510890311419044921624194868439780771003965038593527218347928595837144549712387437955137898342389536252172408801519559361533323573530056999095880997005249404376194642888665840838489802127908185492835237642509318164825585008158102732506279538956613254223501851452029489332623731423795806233197444593626681657817160378028227066034816958199223603946277725266407971946415307292763403837832004101947085366681
q = 22146535777326784158876029059498486118352667416531250376880456072708998663169898338967659183896460437206640903581791485911646375145861623210286829100013307596311891668176863067382257756120239025597888402231976384084524584552953976341162029055595327900491547082756178549735533872670334117857426585568750778605841111597160211679170373459995519349159294488699376943486857753121164159769481888358478471895022610943633445291379253223684228825161473731120949112912737630262113855606007240395965757809210259727867927711589791564775929802650283455181073228527686453489978111284772795429258656305784101709168230918919490427147
r = 27819916740783439055711939098033329549511629585882888711549105813349029828595774277058908367500924205359755539621215090918516309826944676239095754801168595169880122781317451614480587896278745209264854513102040778712618229473289263032929267030733316679333032586864965680461588199914376585699268412881587137166579478856794188755906113686195600574061703054756941362497548723692949934778041216055906852134377696279033508806666282450135646448553521874664082760386308529023568354301184788971197514307275654175449048826075791049697809439929347575569236425506004978712707414387599981847041451246903829425915146769905671263773
e = 65537
c1 = 381069285100501871522087811493550905198188960030751325118473292211721172724945400851753896037004606245416539933976144394979158631237671756909066247247948657455463544370978705281106076582936920059839389639324602559885258011506319919444034559534161629591362838114040811027316110122399760193317706368614091049552410153189126777046775531348995841633603915743870982717512900837715408697220152656945042833613130640604201878636782124578056677959713510522729201148873058100021433527643925404508372293838761493245193523300633811142677155050909169204237034111744335148069413991638567324485404779032807774024268683800248849305245158551014474667378084785353996087326905760046021519173564654262068228543060770224035401472305016440034107419937276452606743360092602145817996522605693522170574104072149289934130651578954382892812930560547375012607952007386098221328133681604521057092328956919768459413704775366733492106940290228897291407667073215842645582680094802781728265146676458960343970806963121253297554819744302905292070292300725362914290724183949474138147950909314365183897991947821426922965681115837438882479870511141154709033470889637694265305456662747715495015790021616624574060669895147696535390744429693577809258663966840165386993435407
c2 = 189067567513924361366841896403262862290852818934133552091223969376176842756133065184300343876378351342482398809757435596016656900573073161917379304331850007350704157392160586916533123270174140945354274212194179979653836191893130697458038530838405888127138844324772849097679116321750629080533886807420776765783941746172847831709553753006201417688728652298440697987317301855151730703703573635905882849810271134252070214368840079159389831043324643656295121177074278151076444507043284743210746646988738929938156504512240984412509205938974747552402407497421567966974824575765305251022421356985862385030348535458938858844901708520023408264985492901173877077175801005221163408655778666007241201808107485677030169130305243857752266595943639103168587096284649025674954539315353048669782392048875595639610664020410369075734789773608666125542063040732626453700969601790271924006790956175327921865531481168229889323603339035825361151830912759620097238533560817386375684965176594881676677306605042527530502146671644450958838782505080700430779435150081216067636225765101597810641167753096126000722960971877550528539845565787851101340275515309771722486035069873896866643709391742761133938205666074545421157439002945584201532020248894119434541703269

# n1, n2 계산
n1 = p * q
n2 = p * r

# φ(n1) 및 φ(n2) 계산
phi_n1 = (p - 1) * (q - 1)
phi_n2 = (p - 1) * (r - 1)

# 개인키 d 계산
d1 = mod_inverse(e, phi_n1)
d2 = mod_inverse(e, phi_n2)

# 복호화
m1 = pow(c1, d1, n1)
m2 = pow(c2, d2, n2)

# 메시지 출력
try:
    message1 = m1.to_bytes((m1.bit_length() + 7) // 8, 'big')
    message2 = m2.to_bytes((m2.bit_length() + 7) // 8, 'big')
    
    # Try to decode messages
    print(f"Decrypted message 1: {message1.decode('utf-8', errors='ignore')}")
    print(f"Decrypted message 2: {message2.decode('utf-8', errors='ignore')}")
except Exception as e:
    print(f"An error occurred: {e}")
    print(f"Message 1 (bytes): {message1}")
    print(f"Message 2 (bytes): {message2}")